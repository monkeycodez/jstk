JSTK is a reverse-polish notation language running on the jvm.

	Author: Matthew Gruda

	  JSTK is currently in early-alpha stage, having just an example,
	the cond operator (like if-then-else) and while loops. However, it will
	soon make VB nervous.

	Reverse-Polish notation:
		  Basically it is putting operators on the end, so "1 + 2"
		looks like "1 2 +".  For more google it.

	Syntax:
		  JSTK is composed of atoms, blocks, lists and code objects.
		Everything evaluates to something, except comments.
		COMMENT:
				Starts with a "/*" and ends with "*/", just like c
		ATOM: 
			a literal string/number or a variable/function. Ex:
			123 - litteral number
			"foo" - litteral string
			i - variable or function
			+*/^- - variable or function
			,foo - a coderef atom.  This form is very important
		TAG:
			:TNAME - a tag of "TNAME"
		BLOCK:
			a number of atoms, enclosed by a {}
		List:
			atoms, enclosed by a (), but after the list
			is exec'ed, whatever is left on the stack becomes
			the list
		CODE:
			a special kind of atom.  any of the above with a ',' in front

	Execution:
		every statement is evaluated and results pushed on the Obj stack. 
		 litterals evaluate to themselves.  Functions can pop ostack to
		 get arguments.  A CODE statement evaluates to a CodeObj, which 
		 can then be used for assigns, callbacks with exec, etc.

		The variable stack (vstack) stores variables.  Any name defined
		 in a global scope will always be avalible, but any other name
		 works like a local variable simmilar to other languages.

	Builtin Functions:
		"ATOM print", "ATOM println" - prints to stdout, aka System.out
		"(CODE_condition1 CODE_expr1 ...) cond" - the basic conditional
			operator, if condition 1 is true, condition 2 is 
			executed.  if list size is odd, the last CODE will be 
			executed if nothing else is run, like an else block.
		"(CODE_condition CODE_body) while" - the basic looping operator.
			will check condition, then run body, then check
			condition, then run body...
		"ret" - returns from the function.  Whatever is on top of the ostac
			is returned
		"( statement1 statement2 ) try" - the basic try-catch operator.
			statement1 is executed, and if it throws an error, 
			the ExceptObj is pushed on the stack and statement2
			is executed
		"ATOM ,coderef set" - the basic assignment operator, will
			overwrite the previous value of coderef.  
		"setl" - like set, but it will not overwrite the value of 
			coderef in a previous frame
		"( CODE_name (CODE_arg1 ...) statement :Tags... ) defun" the basic function 
			definition operator. Can have multiple :Tags on the end,
			Avalible tags:
				:macro - will not push a full vstack frame
		"exit" - immediately ends execution
	
	Examples:
		Hello World:
			"Hello World!" println
		Count from 1 to 20:
			1 ,i set
			(
				,{20 i >=}
				,{
					i println
					i ++
				}
			) while
		Function Hello World:
			(
				,hello
				()
				,{
					"Hello World!" println
				}
			) defun
			hello
		
			




